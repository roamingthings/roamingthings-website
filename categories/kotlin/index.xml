<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on roamingthings</title><link>https://roamingthings.de/categories/kotlin/</link><description>Recent content in Kotlin on roamingthings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021 Alexander Sparkowsky</copyright><lastBuildDate>Sun, 02 Dec 2018 08:18:02 +0000</lastBuildDate><atom:link href="https://roamingthings.de/categories/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>A Semantic Logger for JVM Languages</title><link>https://roamingthings.de/posts/semantic-logger/</link><pubDate>Sun, 02 Dec 2018 08:18:02 +0000</pubDate><guid>https://roamingthings.de/posts/semantic-logger/</guid><description>This little library is inspired by the talk Observability in einer Microservice Welt held on Berlin Expert Days 2018 by Andreas Weigel and Jakob Fels.
If you prefer to have some semantic to your logging and improve code readability you can use the SemanticLogger and its SemanticLoggerFactory which adds a thin layer around Slf4j.
The SemanticLoggerFactory can be used like the Slf4j LoggerFactory to create a new Logger by class, name or a delegateLogger:</description></item><item><title>Building a Spring Boot 2 Auto-Configuration and Starter with Kotlin and Gradle</title><link>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</link><pubDate>Sun, 19 Aug 2018 07:32:52 +0000</pubDate><guid>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</guid><description>A concept that makes Spring Boot very powerful are its Starters and Auto-Configuration. It enables the automatic inclusion of dependencies and configuration or initialization based on several conditions.
Recently I have been looking for a tutorial or &amp;ldquo;best practice&amp;rdquo; on how to use Gradle to build a custom starter. Since I was unable to find an example I ended up writing my own. I also added some Kotlin into the mix.</description></item><item><title>Using Jib to Build Docker Images for Spring Boot 2 Applications</title><link>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</link><pubDate>Sun, 19 Aug 2018 06:59:33 +0000</pubDate><guid>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</guid><description>If you want to create a Docker image from your Spring Boot 2 application you can use various plugins for Gradle or Maven. They all have in common that the application itself will be added as a single layer containing the full jar including all dependencies. For a typical Spring Boot 2 application this means, that for each build an image layer of at least 60MB has to be pushed to the registry.</description></item><item><title>Using Kotlin "data class" in bi-directional JPA relations</title><link>https://roamingthings.de/posts/kotlin-data-class-in-bi-directional-jpa-relations/</link><pubDate>Sun, 09 Jul 2017 07:45:49 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-data-class-in-bi-directional-jpa-relations/</guid><description>Data classes in Kotlin provide an easy way to implement entity beans for JPA without a lot of boilerplate code. This also includes toString(), hashCode() and equals() methods.
However when you are modelling a bi-directional relationship between to entities you run into trouble since the toString() methods of both entities will call each other recursively ending in a StackOverflowException eventually.
@Entity data class Child( @Id @GeneratedValue val id: Long? = null, val name: String, @ManyToOne val parent: Parent?</description></item><item><title>Kotlin, Spring Boot and Angular 4</title><link>https://roamingthings.de/posts/kotlin-spring-boot-and-angular-4/</link><pubDate>Sun, 02 Jul 2017 19:15:09 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-spring-boot-and-angular-4/</guid><description>This weekend I have been tinkering around with Kotlin, Spring Boot and Angular 4.
I experienced how to combine everything in a multi-project using Gradle as a build tool.
As I&amp;rsquo;m getting more into Kotlin I like it more and more. Especially the lack of a lot of boilerplate code is very refreshing. I still have to improve on the overall style but I will definitely use Kotlin more in the future.</description></item><item><title>Kotlin Koans</title><link>https://roamingthings.de/posts/kotlin-koans/</link><pubDate>Thu, 29 Jun 2017 15:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-koans/</guid><description>Kotlin is an interesting language originally invented by JetBrains. Also you may be tempted to say that it&amp;rsquo;s a &amp;ldquo;new&amp;rdquo; language it&amp;rsquo;s in development for some time now and has already reached a decent level of maturity.
I&amp;rsquo;ve became interested in Kotlin when it was first officially announced by JetBrains a while ago. Unfortunately I haven&amp;rsquo;t had much time to look into it. At the moment Kotlin gains more and more attention by developers.</description></item></channel></rss>