<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on roamingthings</title><link>https://roamingthings.de/categories/docker/</link><description>Recent content in Docker on roamingthings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021 Alexander Sparkowsky</copyright><lastBuildDate>Sun, 19 Aug 2018 06:59:33 +0000</lastBuildDate><atom:link href="https://roamingthings.de/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Jib to Build Docker Images for Spring Boot 2 Applications</title><link>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</link><pubDate>Sun, 19 Aug 2018 06:59:33 +0000</pubDate><guid>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</guid><description>If you want to create a Docker image from your Spring Boot 2 application you can use various plugins for Gradle or Maven. They all have in common that the application itself will be added as a single layer containing the full jar including all dependencies. For a typical Spring Boot 2 application this means, that for each build an image layer of at least 60MB has to be pushed to the registry.</description></item><item><title>Use a Docker container to run a shell</title><link>https://roamingthings.de/posts/docker-to-run-a-shell/</link><pubDate>Wed, 21 Jun 2017 05:35:07 +0000</pubDate><guid>https://roamingthings.de/posts/docker-to-run-a-shell/</guid><description>If you need to run a shell script in a specific environment than your current host you can use a temporary Docker container and link it to the current directory.
For example if you want to run a bash script on ubuntu you can store the script file in the current directory and start a temporary ubuntu container:
$ docker container run --rm -v $(pwd):/root -it ubuntu /bin/bash Inside the container you can then access the script in the /root directory:</description></item><item><title>How to pass HTTP proxy settings to the build process of a docker container</title><link>https://roamingthings.de/posts/how-to-pass-http-proxy-settings-to-the-build-process-of-a-docker-container/</link><pubDate>Wed, 24 May 2017 09:32:43 +0000</pubDate><guid>https://roamingthings.de/posts/how-to-pass-http-proxy-settings-to-the-build-process-of-a-docker-container/</guid><description>When building a docker image you may need http proxy settings to download artefacts from the internet.
You can pass the http proxy settings (http_proxy, https_proxy) from the host system into the docker container during build:
$ docker build -t &amp;lt;image_tag&amp;gt; . --build-arg http_proxy=$http_proxy --build-arg https_proxy=$https_proxy</description></item><item><title>[100 Days of Code] Day 028: May 6, 2017</title><link>https://roamingthings.de/posts/100doc-day028/</link><pubDate>Sat, 06 May 2017 14:16:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day028/</guid><description>Today&amp;rsquo;s Progress: Setup the 100 Days of Code Log on my blog, update the blog to run in a container with an nginx frontend and SSL fed by certbot.
Things I&amp;rsquo;ve learned: How to setup ghost in a docker container, setup nginx, setup certbot
Things I&amp;rsquo;ve planned for tomorrow: Work on the Spring Security part of the expense tracker project again.
Link(s) to work: [Blog](no commit today)</description></item></channel></rss>