<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>STM32 on roamingthings</title><link>https://roamingthings.de/categories/stm32/</link><description>Recent content in STM32 on roamingthings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021 Alexander Sparkowsky</copyright><lastBuildDate>Mon, 26 Jun 2017 06:54:54 +0000</lastBuildDate><atom:link href="https://roamingthings.de/categories/stm32/index.xml" rel="self" type="application/rss+xml"/><item><title>Resource: Tutorial how to get into embedded software development</title><link>https://roamingthings.de/posts/resource-tutorial-how-to-get-into-embedded-software-development/</link><pubDate>Mon, 26 Jun 2017 06:54:54 +0000</pubDate><guid>https://roamingthings.de/posts/resource-tutorial-how-to-get-into-embedded-software-development/</guid><description>If you want to get into embedded development beyond Arduino I will point you to a series of articles on the embedded.fm blog.
In the series EMBEDDED WEDNESDAYS: GETTING STARTED IN EMBEDDED SYSTEMS you will find a very good introduction into developing embedded software using C on a STM32 MCU containing an ARM Cortex-M4F core.
The series starts by getting an introduction into the C programming language. Without getting too deep into the language you will learn enough to get started and implement your first projects that go well beyond the usual blinking LED (also this example is also included as an article).</description></item><item><title>[100 Days of Code] Day 065: June 24, 2017</title><link>https://roamingthings.de/posts/100doc-day065/</link><pubDate>Sat, 24 Jun 2017 13:02:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day065/</guid><description>I haven&amp;rsquo;t published my progress in the last few days also I&amp;rsquo;ve been working on my Project. This is due to the fact that I have been working on getting I2C working on my STM32 and just didn&amp;rsquo;t get it. Today I started a last try and finally was able to talk to let my STM32 talk to my BME280 environment sensor. I will post my findings in a separate post.</description></item><item><title>[100 Days of Code] Day 064: June 20, 2017</title><link>https://roamingthings.de/posts/100doc-day064/</link><pubDate>Tue, 20 Jun 2017 18:10:32 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day064/</guid><description>Today&amp;rsquo;s Progress: Setup the project on a new board and rewired everything. This allows me to move the project around more easily. I&amp;rsquo;ve also been looking into more I2C code.
Things I&amp;rsquo;ve learned: I&amp;rsquo;ve seen the interior of a breadboard :) Finally&amp;hellip;
Things I&amp;rsquo;ve planned for tomorrow: Continue on I2C code.
Link(s) to work:</description></item><item><title>[100 Days of Code] Day 063: June 19, 2017</title><link>https://roamingthings.de/posts/100doc-day063/</link><pubDate>Mon, 19 Jun 2017 17:33:25 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day063/</guid><description>Today&amp;rsquo;s Progress: Started to write I2C code. Unfortunately it&amp;rsquo;s not running yet. Although the examples are working well, using these for an own project is not that easy.
Things I&amp;rsquo;ve learned: How to configure I2C on an STM32. Specially when it comes to more modern STM32 like the L4 family some things are different compared to the more mature families like the F1 or F4.
Things I&amp;rsquo;ve planned for tomorrow: Continue with I2C code.</description></item><item><title>[100 Days of Code] Day 062: June 18, 2017</title><link>https://roamingthings.de/posts/100doc-day062/</link><pubDate>Sun, 18 Jun 2017 15:33:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day062/</guid><description>After struggling with the security server integration tests the last days (or weeks?) and being sick for the last days I decided to continue on my second project wich aims at reading and processing environmental data with a STM32 MCU. Today I setup the circuit and got into the Digilent Analog Discovery 2.
Today&amp;rsquo;s Progress: Setting up the circuit and testing an I2C display with an Arduino which I will use as a Hello World tool.</description></item><item><title>[100 Days of Code] Day 032: May 11, 2017</title><link>https://roamingthings.de/posts/100doc-day032/</link><pubDate>Thu, 11 May 2017 02:30:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day032/</guid><description>Today&amp;rsquo;s Progress: I wanted to base my STM32 project on a different example that uses LL (low level) drivers and better demonstrates the Usage of I2C on the STM32 for my purpose.
Unfortunately I haven&amp;rsquo;t been able to get the example to compile (yet).
Things I&amp;rsquo;ve learned: I learned that I either do not know enough about the stm32-cmake toolchain I&amp;rsquo;ve been using so far or that it&amp;rsquo;s not easy to switch between HAL and LL drivers on a per project base.</description></item><item><title>[100 Days of Code] Day 032: May 10, 2017</title><link>https://roamingthings.de/posts/00doc-day032/</link><pubDate>Wed, 10 May 2017 02:39:00 +0000</pubDate><guid>https://roamingthings.de/posts/00doc-day032/</guid><description>Today&amp;rsquo;s Progress: Finally setup the second &amp;ldquo;bigger&amp;rdquo; project I want to proceed. The aim is to learn about the STM32 by creating a small device based on a STM32 MCU that senses environmental information and finally transmits it over a (long range) wireless technology like LoRa or Zigbee.
Today I setup the basic project structure by copying an I2C project from the CubeMX framework into my project structure utilizing the stm32-cmake build chain I&amp;rsquo;ve updated in the last days.</description></item><item><title>[100 Days of Code] Day 031: May 9, 2017</title><link>https://roamingthings.de/posts/100doc-day031/</link><pubDate>Tue, 09 May 2017 02:43:55 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day031/</guid><description>Today&amp;rsquo;s Progress: Migrated my stm32-blinky project to the stm32-cmake toolchain.
Things I&amp;rsquo;ve learned: More understanding of CMake and the development process.
Things I&amp;rsquo;ve planned for tomorrow: Setting up a small project to access a BME 280 sensor.
Link(s) to work: stm32-blinky</description></item><item><title>[100 Days of Code] Day 030: May 8, 2017</title><link>https://roamingthings.de/posts/100doc-day030/</link><pubDate>Mon, 08 May 2017 14:57:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day030/</guid><description>Today&amp;rsquo;s Progress: Added basic support for STM32L4 family to the build system. Got a simple blinky test application working on a Nucleo-L476RG.
Things I&amp;rsquo;ve learned: The L4 family has two separate types of RAM which has to be factored in when generating the linker script.
Things I&amp;rsquo;ve planned for tomorrow: Either continue on the build-system or get back to the Spring application.
Link(s) to work: stm32-cmake</description></item></channel></rss>