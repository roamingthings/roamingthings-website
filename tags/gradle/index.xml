<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gradle on roamingthings</title><link>https://roamingthings.de/tags/gradle/</link><description>Recent content in Gradle on roamingthings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021 Alexander Sparkowsky</copyright><lastBuildDate>Sat, 30 Oct 2021 15:47:13 +0200</lastBuildDate><atom:link href="https://roamingthings.de/tags/gradle/index.xml" rel="self" type="application/rss+xml"/><item><title>Disable Gralde tests when building projects with SAM</title><link>https://roamingthings.de/posts/disable-gradle-tests-on-sam-build/</link><pubDate>Sat, 30 Oct 2021 15:47:13 +0200</pubDate><guid>https://roamingthings.de/posts/disable-gradle-tests-on-sam-build/</guid><description>The Serverless Application Model (SAM) allows to easily build, deploy and run serverless applications on AWS. I like the fact that SAM is able to work with Lambda functions that are written in Java and are using Gradle as build tool.
When running sam build to (re-)build any such function, SAM will always do a gradle clean build which includes execution of tests. This makes total sense when running in a CI/CD pipeline.</description></item><item><title>Building a Spring Boot 2 Auto-Configuration and Starter with Kotlin and Gradle</title><link>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</link><pubDate>Sun, 19 Aug 2018 07:32:52 +0000</pubDate><guid>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</guid><description>A concept that makes Spring Boot very powerful are its Starters and Auto-Configuration. It enables the automatic inclusion of dependencies and configuration or initialization based on several conditions.
Recently I have been looking for a tutorial or &amp;ldquo;best practice&amp;rdquo; on how to use Gradle to build a custom starter. Since I was unable to find an example I ended up writing my own. I also added some Kotlin into the mix.</description></item><item><title>Using Jib to Build Docker Images for Spring Boot 2 Applications</title><link>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</link><pubDate>Sun, 19 Aug 2018 06:59:33 +0000</pubDate><guid>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</guid><description>If you want to create a Docker image from your Spring Boot 2 application you can use various plugins for Gradle or Maven. They all have in common that the application itself will be added as a single layer containing the full jar including all dependencies. For a typical Spring Boot 2 application this means, that for each build an image layer of at least 60MB has to be pushed to the registry.</description></item><item><title>[100 Days of Code] Day 057: June 9, 2017</title><link>https://roamingthings.de/posts/100doc-day057/</link><pubDate>Fri, 09 Jun 2017 18:41:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day057/</guid><description>Today&amp;rsquo;s Progress: Published first snapshot version of a project to OSSRH maven repository.
Things I&amp;rsquo;ve learned: How to setup an account with Sonatype and publish an artifact from a gradle build
Things I&amp;rsquo;ve planned for tomorrow: Integrate publishing into CD pipeline.
Link(s) to work: rule-jpa</description></item><item><title>[100 Days of Code] Day 041: May 21, 2017</title><link>https://roamingthings.de/posts/100doc-day041/</link><pubDate>Sun, 21 May 2017 19:23:31 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day041/</guid><description>Today&amp;rsquo;s Progress: Unsuccessfully tried to configure IntelliJ via Gradle to include the Angular webinar generated by one subproject as a runtime artifact to the backend project. Eventually gave up. Will continue tomorrow.
Things I&amp;rsquo;ve learned: &amp;mdash;
Things I&amp;rsquo;ve planned for tomorrow: Continue to setup the IntelliJ project by gradle.
Link(s) to work: Unfortunately no visible progress today.</description></item></channel></rss>