<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>roamingthings</title><link>https://roamingthings.de/</link><description>Recent content on roamingthings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021 Alexander Sparkowsky</copyright><lastBuildDate>Sat, 30 Oct 2021 15:47:13 +0200</lastBuildDate><atom:link href="https://roamingthings.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Disable tests when using SAM with Gradle projects</title><link>https://roamingthings.de/posts/sam-disable-gradle-tests/</link><pubDate>Sat, 30 Oct 2021 15:47:13 +0200</pubDate><guid>https://roamingthings.de/posts/sam-disable-gradle-tests/</guid><description>The Serverless Application Model (SAM) allows to easily build, deploy and run serverless applications on AWS. I like the fact that SAM is able to work with Lambda functions that are written in Java and are using Gradle as build tool.
When running sam build to (re-)build any such function, SAM will always do a gradle clean build which includes execution of tests. This makes total sense when running in a CI/CD pipeline.</description></item><item><title>Useful Resources</title><link>https://roamingthings.de/useful-resources/</link><pubDate>Sun, 16 Jun 2019 10:43:29 +0200</pubDate><guid>https://roamingthings.de/useful-resources/</guid><description>This page contains some links I find useful for my daily work or leisure.
Spring Versions of dependencies as defined by Spring Boot: GitHub: spring-boot/spring-boot-project/spring-boot-dependencies/pom.xml</description></item><item><title>Workbenches</title><link>https://roamingthings.de/workbenches/</link><pubDate>Sun, 16 Jun 2019 09:28:53 +0200</pubDate><guid>https://roamingthings.de/workbenches/</guid><description>When trying out new technologies I often build small projects just to be able to play around and have some kind of a template when I talk about these technologies or am actually using them in projects.
Please note that most workbenches may not be maintained for a longer time. Some may even never be updated at all.
This is a list of my workbenches you can find in my GitHub account.</description></item><item><title>Turning the backlight of the official Raspberry Pi Touch Screen on or off</title><link>https://roamingthings.de/posts/rpi-touchscreen-backlight/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/rpi-touchscreen-backlight/</guid><description>I&amp;rsquo;ve setup a https://magicmirror.builders to have some information handy when leaving my apartment. I&amp;rsquo;m using a [https://www.raspberrypi.org/](Rasspberry Pi) with the official [https://www.raspberrypi.org/products/raspberry-pi-touch-display/](Raspberry Pi Touch Display).
However I don&amp;rsquo;t want to have the display backlight turned on all the time. Especially at night the backlight is rather annoying. In Addition I don&amp;rsquo;t see why I should use up energy when nobody is looking at the screen.
Turning the backlight on and off After some research I fond that turning the display on and off can be achieved by writing 0 or 1 to a special file:</description></item><item><title>Some resources for using CLion to build ESP32 applications</title><link>https://roamingthings.de/posts/esp-idf-clion-resources/</link><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/esp-idf-clion-resources/</guid><description>&lt;p>In this article I share some resources I found about how to setup CLion and ESP-IDF to develop Software for the ESP32.&lt;/p></description></item><item><title>About Me</title><link>https://roamingthings.de/about/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://roamingthings.de/about/</guid><description>Software Development, Agile and Mobile Technology â€” My passion and fascination. My name is Alexander Sparkowsky. I&amp;rsquo;m a graduated Engineer (Dipl.-Ing.), passionate and professional software engineer, tinkerer and maker based in Berlin, Germany.
My professional work focusses on enterprise Applications, Agile, DDD and embedded systems.
Creating Software is a Craft From my experience creating software is not just writing code but a craft following some core values:
Value for the customer Sustainability Quality Readability Simplicity Self-documented How I like to work When working communication and creativity are key to success.</description></item><item><title>vboxautostart Setup on Ubuntu 18.04</title><link>https://roamingthings.de/posts/vboxautostart-service/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/vboxautostart-service/</guid><description>&lt;p>In this article I show how to setup VirtualBox to start a virtual machine on
boot of an Ubuntu 18.04 system.&lt;/p></description></item><item><title>A Semantic Logger for JVM Languages</title><link>https://roamingthings.de/posts/semantic-logger/</link><pubDate>Sun, 02 Dec 2018 08:18:02 +0000</pubDate><guid>https://roamingthings.de/posts/semantic-logger/</guid><description>This little library is inspired by the talk Observability in einer Microservice Welt held on Berlin Expert Days 2018 by Andreas Weigel and Jakob Fels.
If you prefer to have some semantic to your logging and improve code readability you can use the SemanticLogger and its SemanticLoggerFactory which adds a thin layer around Slf4j.
The SemanticLoggerFactory can be used like the Slf4j LoggerFactory to create a new Logger by class, name or a delegateLogger:</description></item><item><title>Building a Spring Boot 2 Auto-Configuration and Starter with Kotlin and Gradle</title><link>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</link><pubDate>Sun, 19 Aug 2018 07:32:52 +0000</pubDate><guid>https://roamingthings.de/posts/spring-boot-auto-configuration-and-starter/</guid><description>A concept that makes Spring Boot very powerful are its Starters and Auto-Configuration. It enables the automatic inclusion of dependencies and configuration or initialization based on several conditions.
Recently I have been looking for a tutorial or &amp;ldquo;best practice&amp;rdquo; on how to use Gradle to build a custom starter. Since I was unable to find an example I ended up writing my own. I also added some Kotlin into the mix.</description></item><item><title>Using Jib to Build Docker Images for Spring Boot 2 Applications</title><link>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</link><pubDate>Sun, 19 Aug 2018 06:59:33 +0000</pubDate><guid>https://roamingthings.de/posts/docker-images-with-jib-for-spring-boot-applications/</guid><description>If you want to create a Docker image from your Spring Boot 2 application you can use various plugins for Gradle or Maven. They all have in common that the application itself will be added as a single layer containing the full jar including all dependencies. For a typical Spring Boot 2 application this means, that for each build an image layer of at least 60MB has to be pushed to the registry.</description></item><item><title>Cross-compiling Kotlin/Native applications and libraries for Raspberry Pi on macOS</title><link>https://roamingthings.de/posts/cross-compiling-kotlin-native-applications-and-libraries-for-raspberry-pi-on-macos/</link><pubDate>Thu, 21 Dec 2017 08:40:36 +0000</pubDate><guid>https://roamingthings.de/posts/cross-compiling-kotlin-native-applications-and-libraries-for-raspberry-pi-on-macos/</guid><description>I&amp;rsquo;m a big fan of the Kotlin programming language since it has been announced by JetBrains some times ago.
After Kotlin/Native became available including the ability to compile to native Raspberry Pi binaries I decided to play around with it and see what&amp;rsquo;s possible. The problem I&amp;rsquo;ve been facing is the fact that cross-compilation for Raspberry Pi requires a Linux system. Since I prefer to use my macOS system for developing I have been looking for an alternative to use a full blown Virtual machine.</description></item><item><title>Manually refresh let's encrypt on a Synology NAS</title><link>https://roamingthings.de/posts/manually-refresh-lets-encrypt-on-a-synology-nas/</link><pubDate>Tue, 11 Jul 2017 02:32:09 +0000</pubDate><guid>https://roamingthings.de/posts/manually-refresh-lets-encrypt-on-a-synology-nas/</guid><description>I&amp;rsquo;m using a https certificate from Let&amp;rsquo;s Encrypt to securely connect to my NAS and other servers (like this one). The software running on my Synology NAS automatically generates and renews this certificate for me after it has been setup once.
One important thing though is that port 80 and 443 are reachable from the internet. I recently misconfigured my router so that the request was not getting thorough and I had to / wanted to start the renewal manually.</description></item><item><title>Using Kotlin "data class" in bi-directional JPA relations</title><link>https://roamingthings.de/posts/kotlin-data-class-in-bi-directional-jpa-relations/</link><pubDate>Sun, 09 Jul 2017 07:45:49 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-data-class-in-bi-directional-jpa-relations/</guid><description>Data classes in Kotlin provide an easy way to implement entity beans for JPA without a lot of boilerplate code. This also includes toString(), hashCode() and equals() methods.
However when you are modelling a bi-directional relationship between to entities you run into trouble since the toString() methods of both entities will call each other recursively ending in a StackOverflowException eventually.
@Entity data class Child( @Id @GeneratedValue val id: Long? = null, val name: String, @ManyToOne val parent: Parent?</description></item><item><title>Kotlin, Spring Boot and Angular 4</title><link>https://roamingthings.de/posts/kotlin-spring-boot-and-angular-4/</link><pubDate>Sun, 02 Jul 2017 19:15:09 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-spring-boot-and-angular-4/</guid><description>This weekend I have been tinkering around with Kotlin, Spring Boot and Angular 4.
I experienced how to combine everything in a multi-project using Gradle as a build tool.
As I&amp;rsquo;m getting more into Kotlin I like it more and more. Especially the lack of a lot of boilerplate code is very refreshing. I still have to improve on the overall style but I will definitely use Kotlin more in the future.</description></item><item><title>Kotlin Koans</title><link>https://roamingthings.de/posts/kotlin-koans/</link><pubDate>Thu, 29 Jun 2017 15:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/kotlin-koans/</guid><description>Kotlin is an interesting language originally invented by JetBrains. Also you may be tempted to say that it&amp;rsquo;s a &amp;ldquo;new&amp;rdquo; language it&amp;rsquo;s in development for some time now and has already reached a decent level of maturity.
I&amp;rsquo;ve became interested in Kotlin when it was first officially announced by JetBrains a while ago. Unfortunately I haven&amp;rsquo;t had much time to look into it. At the moment Kotlin gains more and more attention by developers.</description></item><item><title>Resource: Tutorial how to get into embedded software development</title><link>https://roamingthings.de/posts/resource-tutorial-how-to-get-into-embedded-software-development/</link><pubDate>Mon, 26 Jun 2017 06:54:54 +0000</pubDate><guid>https://roamingthings.de/posts/resource-tutorial-how-to-get-into-embedded-software-development/</guid><description>If you want to get into embedded development beyond Arduino I will point you to a series of articles on the embedded.fm blog.
In the series EMBEDDED WEDNESDAYS: GETTING STARTED IN EMBEDDED SYSTEMS you will find a very good introduction into developing embedded software using C on a STM32 MCU containing an ARM Cortex-M4F core.
The series starts by getting an introduction into the C programming language. Without getting too deep into the language you will learn enough to get started and implement your first projects that go well beyond the usual blinking LED (also this example is also included as an article).</description></item><item><title>[100 Days of Code] Day 065: June 24, 2017</title><link>https://roamingthings.de/posts/100doc-day065/</link><pubDate>Sat, 24 Jun 2017 13:02:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day065/</guid><description>I haven&amp;rsquo;t published my progress in the last few days also I&amp;rsquo;ve been working on my Project. This is due to the fact that I have been working on getting I2C working on my STM32 and just didn&amp;rsquo;t get it. Today I started a last try and finally was able to talk to let my STM32 talk to my BME280 environment sensor. I will post my findings in a separate post.</description></item><item><title>Use a Docker container to run a shell</title><link>https://roamingthings.de/posts/docker-to-run-a-shell/</link><pubDate>Wed, 21 Jun 2017 05:35:07 +0000</pubDate><guid>https://roamingthings.de/posts/docker-to-run-a-shell/</guid><description>If you need to run a shell script in a specific environment than your current host you can use a temporary Docker container and link it to the current directory.
For example if you want to run a bash script on ubuntu you can store the script file in the current directory and start a temporary ubuntu container:
$ docker container run --rm -v $(pwd):/root -it ubuntu /bin/bash Inside the container you can then access the script in the /root directory:</description></item><item><title>Extract XML node values using grep</title><link>https://roamingthings.de/posts/extract-xml-not-value-using-grep/</link><pubDate>Wed, 21 Jun 2017 05:28:22 +0000</pubDate><guid>https://roamingthings.de/posts/extract-xml-not-value-using-grep/</guid><description>To extract the value(s) of XML nodes with a specified name you can use grep and a regular expression:
$ grep -oP &amp;quot;(?&amp;lt;=&amp;lt;mytag&amp;gt;)[^&amp;lt;]+&amp;quot; &amp;lt;file&amp;gt; To limit the number of nodes that are examined you can specify a maximum number:
$ grep -oPm1 &amp;quot;(?&amp;lt;=&amp;lt;mytag&amp;gt;)[^&amp;lt;]+&amp;quot; &amp;lt;file&amp;gt;</description></item><item><title>[100 Days of Code] Day 064: June 20, 2017</title><link>https://roamingthings.de/posts/100doc-day064/</link><pubDate>Tue, 20 Jun 2017 18:10:32 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day064/</guid><description>Today&amp;rsquo;s Progress: Setup the project on a new board and rewired everything. This allows me to move the project around more easily. I&amp;rsquo;ve also been looking into more I2C code.
Things I&amp;rsquo;ve learned: I&amp;rsquo;ve seen the interior of a breadboard :) Finally&amp;hellip;
Things I&amp;rsquo;ve planned for tomorrow: Continue on I2C code.
Link(s) to work:</description></item><item><title>[100 Days of Code] Day 063: June 19, 2017</title><link>https://roamingthings.de/posts/100doc-day063/</link><pubDate>Mon, 19 Jun 2017 17:33:25 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day063/</guid><description>Today&amp;rsquo;s Progress: Started to write I2C code. Unfortunately it&amp;rsquo;s not running yet. Although the examples are working well, using these for an own project is not that easy.
Things I&amp;rsquo;ve learned: How to configure I2C on an STM32. Specially when it comes to more modern STM32 like the L4 family some things are different compared to the more mature families like the F1 or F4.
Things I&amp;rsquo;ve planned for tomorrow: Continue with I2C code.</description></item><item><title>[100 Days of Code] Day 062: June 18, 2017</title><link>https://roamingthings.de/posts/100doc-day062/</link><pubDate>Sun, 18 Jun 2017 15:33:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day062/</guid><description>After struggling with the security server integration tests the last days (or weeks?) and being sick for the last days I decided to continue on my second project wich aims at reading and processing environmental data with a STM32 MCU. Today I setup the circuit and got into the Digilent Analog Discovery 2.
Today&amp;rsquo;s Progress: Setting up the circuit and testing an I2C display with an Arduino which I will use as a Hello World tool.</description></item><item><title>[100 Days of Code] Day 061: June 15, 2017</title><link>https://roamingthings.de/posts/100doc-day061/</link><pubDate>Thu, 15 Jun 2017 17:55:06 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day061/</guid><description>Today&amp;rsquo;s Progress: Still no solution for the flickering integration tests.
Things I&amp;rsquo;ve learned: Nothing new.
Things I&amp;rsquo;ve planned for tomorrow: I will continue until I eventually find the reason.
Link(s) to work: security-server</description></item><item><title>[100 Days of Code] Day 060: June 14, 2017</title><link>https://roamingthings.de/posts/100doc-day060/</link><pubDate>Wed, 14 Jun 2017 19:13:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day060/</guid><description>Unfortunately I had some important things to manage in the last days and therefore have not been able to work a lot on my projects. However since I&amp;rsquo;m doing this challenge to motivate myself and to have constant progress in my project I will continue where I left off a few days ago.
Today&amp;rsquo;s Progress: Managed to get Jenkins collect all test results. Still don&amp;rsquo;t know why the integration tests are flickering.</description></item><item><title>[100 Days of Code] Day 059: June 11, 2017</title><link>https://roamingthings.de/posts/100doc-day059/</link><pubDate>Sun, 11 Jun 2017 16:19:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day059/</guid><description>Today&amp;rsquo;s Progress: Wrote all Jenkins pipelines and wired the security-server project to the snapshot libraries on the public maven repo. Unfortunately when the build of security-server is running in Jenkins it&amp;rsquo;s failing also a local build succeeds.
Things I&amp;rsquo;ve learned: More about Jenkins pipelines.
Things I&amp;rsquo;ve planned for tomorrow: Investigate on the issue why the build fails on Jenkins and why test reports of integration tests don&amp;rsquo;t get collected by Jenkins.</description></item><item><title>[100 Days of Code] Day 058: June 10, 2017</title><link>https://roamingthings.de/posts/100doc-day058/</link><pubDate>Sat, 10 Jun 2017 17:54:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day058/</guid><description>Today&amp;rsquo;s Progress: I have not been able to work on the project as much as I&amp;rsquo;ve planned but have been able to publish the next artifact.
Things I&amp;rsquo;ve learned: Repeated the steps necessary to publish an artifact.
Things I&amp;rsquo;ve planned for tomorrow: Visiting the Maker Faire Berlin
Link(s) to work: persistence-support</description></item><item><title>[100 Days of Code] Day 057: June 9, 2017</title><link>https://roamingthings.de/posts/100doc-day057/</link><pubDate>Fri, 09 Jun 2017 18:41:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day057/</guid><description>Today&amp;rsquo;s Progress: Published first snapshot version of a project to OSSRH maven repository.
Things I&amp;rsquo;ve learned: How to setup an account with Sonatype and publish an artifact from a gradle build
Things I&amp;rsquo;ve planned for tomorrow: Integrate publishing into CD pipeline.
Link(s) to work: rule-jpa</description></item><item><title>[100 Days of Code] Day 056: June 7, 2017</title><link>https://roamingthings.de/posts/100doc-day056/</link><pubDate>Wed, 07 Jun 2017 19:10:42 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day056/</guid><description>Today&amp;rsquo;s Progress: I have been fighting with eclipse link the whole time. Suddenly my integration tests that where using JPA did stop working. Finally I decided to switch to Hibernate which solved my problems.
Things I&amp;rsquo;ve learned: I will be using Hibernate from now on whenever possible.
Things I&amp;rsquo;ve planned for tomorrow: Continue to publish the whole dependency chain so I can continue with my CD pipeline.
Link(s) to work: rules-jpa</description></item><item><title>[100 Days of Code] Day 055: June 6, 2017</title><link>https://roamingthings.de/posts/100doc-day055/</link><pubDate>Tue, 06 Jun 2017 17:53:22 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day055/</guid><description>Today&amp;rsquo;s Progress: As I started to build my CD pipeline I noticed that I have some smaller &amp;ldquo;common&amp;rdquo; projects that have to be available in a repository in order to be used as a dependency during build. So I started to look into the different types of repositories that are available. Since my current project is publicly available I think that I also have to make the dependencies publicly available in a repository.</description></item><item><title>[100 Days of Code] Day 054: June 5, 2017</title><link>https://roamingthings.de/posts/100doc-day054/</link><pubDate>Mon, 05 Jun 2017 17:38:24 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day054/</guid><description>Today&amp;rsquo;s Progress: Setup a Jenkins 2 server for CI/CD and created a simple pipeline.
Things I&amp;rsquo;ve learned: How to setup Jenkins 2 and how pipelines are working
Things I&amp;rsquo;ve planned for tomorrow: Improve pipeline
Link(s) to work: security-server</description></item><item><title>[100 Days of Code] Day 053: June 4, 2017</title><link>https://roamingthings.de/posts/100doc-day053/</link><pubDate>Sun, 04 Jun 2017 14:51:18 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day053/</guid><description>Today&amp;rsquo;s Progress: Implemented integration-tests for OAuth 2 token retrieval.
Things I&amp;rsquo;ve learned: Learned many details about the different OAuth 2 grant_types and flows. This demonstrates how much you can learn when implementing tests ;)
Things I&amp;rsquo;ve planned for tomorrow: Cleanup the tests and maybe implement some more API endpoints.
Link(s) to work: security-server</description></item><item><title>Control following of redirects with Rest-Assured</title><link>https://roamingthings.de/posts/following-of-redirects-with-rest-assured/</link><pubDate>Sun, 04 Jun 2017 09:46:56 +0000</pubDate><guid>https://roamingthings.de/posts/following-of-redirects-with-rest-assured/</guid><description>By default Rest-Assured will follow a redirection if it receives a 302 response after issuing a request. In this case your checks will be applied to the response after the redirect.
Some times you may not want this to happen and rather examine the response of the original request for example to extract cookies or assert the correct location of the redirect.
To achieve this you can use the redirects().follow(false) directive when formulating the request:</description></item><item><title>Disable formatting in parts of source files with IntelliJ</title><link>https://roamingthings.de/posts/disable-formatting-in-parts-of-source-files-with-intellij/</link><pubDate>Sun, 04 Jun 2017 09:39:24 +0000</pubDate><guid>https://roamingthings.de/posts/disable-formatting-in-parts-of-source-files-with-intellij/</guid><description>Since I&amp;rsquo;m writing a lot of Spring code or using libraries like Rest Assured that allow to write somehow &amp;ldquo;human readable&amp;rdquo; code it&amp;rsquo;s nice to be able to turn off code formatting int IntelliJ so that the structure is not destroyed when the source file gets reformatted.
given() .contentType(&amp;quot;application/x-www-form-urlencoded; charset=utf-8&amp;quot;) .when() .queryParam(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;) .get(&amp;quot;http://localhost:8080/bar&amp;quot;) .then() .statusCode(302) To prevent this from happening IntelliJ offers a function to turn off formatting by a marker comment.</description></item><item><title>[100 Days of Code] Day 052: June 3, 2017</title><link>https://roamingthings.de/posts/100doc-day052/</link><pubDate>Sat, 03 Jun 2017 18:01:08 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day052/</guid><description>Today&amp;rsquo;s Progress: F-I-N-A-L-L-Y got OAuth 2 and session/UI based authorization with Spring Security working.
Things I&amp;rsquo;ve learned: A lot about Spring Security filters, and security configuration.
Things I&amp;rsquo;ve planned for tomorrow: Improve the api of the server by adding some more features.
Link(s) to work: security-server</description></item><item><title>[100 Days of Code] Day 051: June 3, 2017</title><link>https://roamingthings.de/posts/100doc-day051/</link><pubDate>Fri, 02 Jun 2017 20:17:43 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day051/</guid><description>By looking deeper into the inner mechanics of Spring Security and OAuth2 I started to get an idea where my problem arises.
Basically I&amp;rsquo;m trying to combine a REST resource secured by an OAuth 2 generated token (implicit grant type) and a &amp;ldquo;general&amp;rdquo; web page protected by a login form and session based authentication mechanism.
It seems as if all filters that are needed for the different authentication methods require a very special filter combination.</description></item><item><title>[100 Days of Code] Day 050: June 1, 2017</title><link>https://roamingthings.de/posts/100doc-day050/</link><pubDate>Thu, 01 Jun 2017 18:29:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day050/</guid><description>Today&amp;rsquo;s Progress: Another day struggling with OAuth 2 and Spring.
Things I&amp;rsquo;ve learned: Nothing new.
Things I&amp;rsquo;ve planned for tomorrow: I will start over tomorrow.
Link(s) to work: Nothing to show</description></item><item><title>[100 Days of Code] Day 049: May 31, 2017</title><link>https://roamingthings.de/posts/100doc-day049/</link><pubDate>Wed, 31 May 2017 18:20:39 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day049/</guid><description>Today&amp;rsquo;s Progress: Improved security configuration but still not where I want to be.
Things I&amp;rsquo;ve learned: Spring Security (again). I&amp;rsquo;m sure there is just one tiny pice missing.
Things I&amp;rsquo;ve planned for tomorrow: Continue working on the authentication.
Link(s) to work: security-server</description></item><item><title>[100 Days of Code] Day 048: May 30, 2017</title><link>https://roamingthings.de/posts/100doc-day048/</link><pubDate>Tue, 30 May 2017 19:47:15 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day048/</guid><description>Today&amp;rsquo;s Progress: Continued on getting a form based login in the authorization server to work. Obviously I didn&amp;rsquo;t yet quiet understand the form based login mechanism in Spring. So I will concentrate on that tomorrow.
Things I&amp;rsquo;ve learned: Nothing final yet
Things I&amp;rsquo;ve planned for tomorrow: Invest more time in looking at the form based login mechanism in Spring Security.
Link(s) to work: No visible work for today</description></item><item><title>[100 Days of Code] Day 047: May 29, 2017</title><link>https://roamingthings.de/posts/100doc-day047/</link><pubDate>Mon, 29 May 2017 18:10:53 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day047/</guid><description>Today&amp;rsquo;s Progress: Continued separating the authentication and user management services from each other.
Things I&amp;rsquo;ve learned: Setting up a Spring Boot project became quite fast for me ;)
Things I&amp;rsquo;ve planned for tomorrow: Implement a simple login form for the auth server.
Link(s) to work: security-server</description></item><item><title>[100 Days of Code] Day 046: May 28, 2017</title><link>https://roamingthings.de/posts/100doc-day046/</link><pubDate>Sun, 28 May 2017 16:41:49 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day046/</guid><description>Security Server While I&amp;rsquo;ve been tinkering around with Spring Security and all the nice things it offers I became very interested in this domain. Also I know there are a lot of good ready-to-use servers and services out there I wanted to have a field to experiment with the thing that Spring offers.
I decided to start this project as an independent server which offers SSO authorization and user management for the other services and clients I plan to build.</description></item><item><title>[100 Days of Code] Day 045: May 26, 2017</title><link>https://roamingthings.de/posts/100doc-day045/</link><pubDate>Fri, 26 May 2017 05:26:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day045/</guid><description>Today&amp;rsquo;s Progress: Did a lot of refactoring to introduce a modular architecture. I hope that this will help me to introduce and test features. Also it&amp;rsquo;s some kind of a test for this architecture.
Things I&amp;rsquo;ve learned: More about context discovery in Spring (Boot) including some special cases in integration tests.
Things I&amp;rsquo;ve planned for tomorrow: Continue on OAuth by trying to connect a client.
Link(s) to work: expenses-service</description></item><item><title>[100 Days of Code] Day 044: May 25, 2017</title><link>https://roamingthings.de/posts/100doc-day044/</link><pubDate>Thu, 25 May 2017 12:42:42 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day044/</guid><description>Today&amp;rsquo;s Progress: Finished implementation of first OAuth server version. Also did some bigger refactoring and made tests work again.
Things I&amp;rsquo;ve learned: A lot about Spring Security / OAuth.
Things I&amp;rsquo;ve planned for tomorrow: Continue on OAuth. Write some tests to obtain and use token.
Link(s) to work: expenses-service</description></item><item><title>How to pass HTTP proxy settings to the build process of a docker container</title><link>https://roamingthings.de/posts/how-to-pass-http-proxy-settings-to-the-build-process-of-a-docker-container/</link><pubDate>Wed, 24 May 2017 09:32:43 +0000</pubDate><guid>https://roamingthings.de/posts/how-to-pass-http-proxy-settings-to-the-build-process-of-a-docker-container/</guid><description>When building a docker image you may need http proxy settings to download artefacts from the internet.
You can pass the http proxy settings (http_proxy, https_proxy) from the host system into the docker container during build:
$ docker build -t &amp;lt;image_tag&amp;gt; . --build-arg http_proxy=$http_proxy --build-arg https_proxy=$https_proxy</description></item><item><title>[100 Days of Code] Day 043: May 24, 2017</title><link>https://roamingthings.de/posts/100doc-day043/</link><pubDate>Wed, 24 May 2017 02:35:13 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day043/</guid><description>Today&amp;rsquo;s Progress: Continued migration from hibernate generated tables to Liquibase.
Things I&amp;rsquo;ve learned: Learned how the hibernate auditing tables are build.
Things I&amp;rsquo;ve planned for tomorrow: Continue on the migration and setup of OAuth.
Link(s) to work: expenses-service</description></item><item><title>[100 Days of Code] Day 042: May 23, 2017</title><link>https://roamingthings.de/posts/100doc-day042/</link><pubDate>Tue, 23 May 2017 02:37:45 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day042/</guid><description>After being not able to work on the project in the last days on a regular basis due to personal reasons I&amp;rsquo;m now back on my regular schedule.
Today&amp;rsquo;s Progress: Started migrating to OAuth 2 (again) and Liquibase because of some plans I have for the future direction I want to take with this project.
Things I&amp;rsquo;ve learned: Also I already did work with Liquibase I learned some more details about changelogs.</description></item><item><title>[100 Days of Code] Day 041: May 21, 2017</title><link>https://roamingthings.de/posts/100doc-day041/</link><pubDate>Sun, 21 May 2017 19:23:31 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day041/</guid><description>Today&amp;rsquo;s Progress: Unsuccessfully tried to configure IntelliJ via Gradle to include the Angular webinar generated by one subproject as a runtime artifact to the backend project. Eventually gave up. Will continue tomorrow.
Things I&amp;rsquo;ve learned: &amp;mdash;
Things I&amp;rsquo;ve planned for tomorrow: Continue to setup the IntelliJ project by gradle.
Link(s) to work: Unfortunately no visible progress today.</description></item><item><title>[100 Days of Code] Day 040: May 19, 2017</title><link>https://roamingthings.de/posts/100doc-day040/</link><pubDate>Fri, 19 May 2017 16:38:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day040/</guid><description>Today&amp;rsquo;s Progress: Added sub project for an Angular Client.
Things I&amp;rsquo;ve learned: Setup an Angular Client and integrate it into a Gradle build.
Things I&amp;rsquo;ve planned for tomorrow: Learn more about Angular 4 and how to integrate it into the project
Link(s) to work: expenses-service</description></item><item><title>[100 Days of Code] Day 039: May 18, 2017</title><link>https://roamingthings.de/posts/100doc-day039/</link><pubDate>Thu, 18 May 2017 18:33:09 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day039/</guid><description>Today&amp;rsquo;s Progress: Implemented a MockMvc based integration test to test successful and unsuccessful login.
Things I&amp;rsquo;ve learned: How to test a Spring (Boot) application by using the MockMvc class. Also learned about a bug that I was able to fix thanks to the tests.
Things I&amp;rsquo;ve planned for tomorrow: Look into Angular as a client.
Link(s) to work: auth-auditing</description></item><item><title>[100 Days of Code] Day 38: May 17, 2017</title><link>https://roamingthings.de/posts/100doc-day038/</link><pubDate>Wed, 17 May 2017 02:20:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day038/</guid><description>Today&amp;rsquo;s Progress: Finally integrated the authentication logging with the authentication process. Now an account becomes locked when a consequent number of failed attempts to login has been recorded.
Things I&amp;rsquo;ve learned: How to integrate the additional checking into the Spring Security mechanism.
Things I&amp;rsquo;ve planned for tomorrow: Write tests to verify the functionality. I know that I should have done this first but I&amp;rsquo;ve been to impatient.
Link(s) to work: auth-auditing</description></item><item><title>[100 Days of Code] Day 037: May 16, 2017</title><link>https://roamingthings.de/posts/100doc-day037/</link><pubDate>Tue, 16 May 2017 02:35:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day037/</guid><description>Today&amp;rsquo;s Progress: Implemented a custom Spring AuthenticationProvider and supporting classes.
Things I&amp;rsquo;ve learned: More about the inner mechanics of Spring Security. How to retrieve, authenticate and check a request.
Things I&amp;rsquo;ve planned for tomorrow: Implement the mechanism to check the status of an account based on auditing data.
Link(s) to work: auth-auditing</description></item><item><title>[100 Days of Code] Day 036: May 15, 2017</title><link>https://roamingthings.de/posts/100doc-day036/</link><pubDate>Mon, 15 May 2017 18:07:04 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day036/</guid><description>Today&amp;rsquo;s Progress: Added a UserDetailsService and did some refactoring.
Also tried to progress on STM32 firmware development but had a hard time fighting against Eclipse and the CubeMX project structure. I will continue on that when I have more time.
Things I&amp;rsquo;ve learned: I read more about the Spring Security framework and implemented a basic UserDetailsService to practice what I&amp;rsquo;ve read. I will add more functionality as I continue the project.</description></item><item><title>[100 Days of Code] Day 035: May 14, 2017</title><link>https://roamingthings.de/posts/100doc-day035/</link><pubDate>Sun, 14 May 2017 08:04:27 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day035/</guid><description>Today&amp;rsquo;s Progress: Logging authentication events to database.
Things I&amp;rsquo;ve learned: How hibernate handles generated id columns, more about Spring Security.
Things I&amp;rsquo;ve planned for tomorrow: Continue on the auth auditing
Link(s) to work: auth-auditing</description></item><item><title>[100 Days of Code] Day 034: May 13, 2017</title><link>https://roamingthings.de/posts/100doc-day034/</link><pubDate>Sat, 13 May 2017 17:39:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day034/</guid><description>Today&amp;rsquo;s Progress: Added a principal to the authentication log, implemented some integration tests and created a separate source tree for integration tests (thank you Gradle!)
Things I&amp;rsquo;ve learned: Separating integration tests with gradle. More on jdbc template.
Things I&amp;rsquo;ve planned for tomorrow: Catch all security relevant events to finally create log entries.
Link(s) to work: auth-auditing</description></item><item><title>[100 Days of Code] Day 033: May 12, 2017</title><link>https://roamingthings.de/posts/100doc-day033/</link><pubDate>Fri, 12 May 2017 02:30:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day033/</guid><description>Today&amp;rsquo;s Progress: I setup a new small Spring Boot application to test an idea that came in my mind to determine if the state of an account (e.g. if it&amp;rsquo;s blocked due to false credentials) just based on logging authentication incidents. If it works well I will use it in my expense application.
Things I&amp;rsquo;ve learned: Setup a Sprint Boot application using Spring Security with a database.
Things I&amp;rsquo;ve planned for tomorrow: Use the weekend to continue work on the STM32 project.</description></item><item><title>[100 Days of Code] Day 032: May 11, 2017</title><link>https://roamingthings.de/posts/100doc-day032/</link><pubDate>Thu, 11 May 2017 02:30:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day032/</guid><description>Today&amp;rsquo;s Progress: I wanted to base my STM32 project on a different example that uses LL (low level) drivers and better demonstrates the Usage of I2C on the STM32 for my purpose.
Unfortunately I haven&amp;rsquo;t been able to get the example to compile (yet).
Things I&amp;rsquo;ve learned: I learned that I either do not know enough about the stm32-cmake toolchain I&amp;rsquo;ve been using so far or that it&amp;rsquo;s not easy to switch between HAL and LL drivers on a per project base.</description></item><item><title>[100 Days of Code] Day 032: May 10, 2017</title><link>https://roamingthings.de/posts/00doc-day032/</link><pubDate>Wed, 10 May 2017 02:39:00 +0000</pubDate><guid>https://roamingthings.de/posts/00doc-day032/</guid><description>Today&amp;rsquo;s Progress: Finally setup the second &amp;ldquo;bigger&amp;rdquo; project I want to proceed. The aim is to learn about the STM32 by creating a small device based on a STM32 MCU that senses environmental information and finally transmits it over a (long range) wireless technology like LoRa or Zigbee.
Today I setup the basic project structure by copying an I2C project from the CubeMX framework into my project structure utilizing the stm32-cmake build chain I&amp;rsquo;ve updated in the last days.</description></item><item><title>[100 Days of Code] Day 031: May 9, 2017</title><link>https://roamingthings.de/posts/100doc-day031/</link><pubDate>Tue, 09 May 2017 02:43:55 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day031/</guid><description>Today&amp;rsquo;s Progress: Migrated my stm32-blinky project to the stm32-cmake toolchain.
Things I&amp;rsquo;ve learned: More understanding of CMake and the development process.
Things I&amp;rsquo;ve planned for tomorrow: Setting up a small project to access a BME 280 sensor.
Link(s) to work: stm32-blinky</description></item><item><title>[100 Days of Code] Day 030: May 8, 2017</title><link>https://roamingthings.de/posts/100doc-day030/</link><pubDate>Mon, 08 May 2017 14:57:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day030/</guid><description>Today&amp;rsquo;s Progress: Added basic support for STM32L4 family to the build system. Got a simple blinky test application working on a Nucleo-L476RG.
Things I&amp;rsquo;ve learned: The L4 family has two separate types of RAM which has to be factored in when generating the linker script.
Things I&amp;rsquo;ve planned for tomorrow: Either continue on the build-system or get back to the Spring application.
Link(s) to work: stm32-cmake</description></item><item><title>[100 Days of Code] Day 029: May 7, 2017</title><link>https://roamingthings.de/posts/100doc-day029/</link><pubDate>Sun, 07 May 2017 07:51:52 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day029/</guid><description>Today&amp;rsquo;s Progress: Removed OAuth2 authentication and implemented authentication based on Spring Security. User and Roles are stored in the database. Also implemented Test (kind of TDD)
Things I&amp;rsquo;ve learned: Basic mechanisms of Spring Security, improved on how to write tests using Mockito
Things I&amp;rsquo;ve planned for tomorrow: Start implementing a simple user management.
Link(s) to work: Expenses Tracker</description></item><item><title>[100 Days of Code] Day 028: May 6, 2017</title><link>https://roamingthings.de/posts/100doc-day028/</link><pubDate>Sat, 06 May 2017 14:16:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day028/</guid><description>Today&amp;rsquo;s Progress: Setup the 100 Days of Code Log on my blog, update the blog to run in a container with an nginx frontend and SSL fed by certbot.
Things I&amp;rsquo;ve learned: How to setup ghost in a docker container, setup nginx, setup certbot
Things I&amp;rsquo;ve planned for tomorrow: Work on the Spring Security part of the expense tracker project again.
Link(s) to work: [Blog](no commit today)</description></item><item><title>Book: 'Change Agent' from Daniel Suarez</title><link>https://roamingthings.de/posts/book-change-agent-from-daniel-suarez/</link><pubDate>Sat, 06 May 2017 09:46:01 +0000</pubDate><guid>https://roamingthings.de/posts/book-change-agent-from-daniel-suarez/</guid><description>Today I finished the book &amp;lsquo;Change Agent&amp;rsquo; written by Daniel Suarez. I&amp;rsquo;ve listened to the audiobook narrated by Jeff Gurner.
As usual with stories from this author it&amp;rsquo;s a reasonable look into a possible future not far away packt into an action heavy story. This time the main topics are augmented reality (AR), self driving cars and most of all genetic engineering.
If you like novels about technology with a lot of action this (audio)book is definitely for you.</description></item><item><title>Moving my 100 Days of Code Challenge Log</title><link>https://roamingthings.de/posts/moving-my-100-days-of-code-challenge-log/</link><pubDate>Sat, 06 May 2017 08:24:17 +0000</pubDate><guid>https://roamingthings.de/posts/moving-my-100-days-of-code-challenge-log/</guid><description>I&amp;rsquo;m on my 100 Days of Code Challenge for about a month now.
So far my experience is very mixed. There are days when I&amp;rsquo;ve lot of things to do and get back home very late. In this case it feels more like a burden to have the challenge going on. On other days it&amp;rsquo;s fine and I enjoy the focus I gain through the simple rules. Therefore the outcome of every day can vary a lot.</description></item><item><title>[100 Days of Code] Day 027: May 5, 2017</title><link>https://roamingthings.de/posts/100doc-day027/</link><pubDate>Fri, 05 May 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day027/</guid><description>Today&amp;rsquo;s Progress: Creating UserProfile after first login from GitHub or facebook.
Things I&amp;rsquo;ve learned: More about Spring MVC.
Things I&amp;rsquo;ve planned for tomorrow: Continue on UserProfile handling/creation.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 026: May 4, 2017</title><link>https://roamingthings.de/posts/100doc-day026/</link><pubDate>Thu, 04 May 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day026/</guid><description>Today&amp;rsquo;s Progress: Still (unsuccesfully) trying to figure out how to create a local profile for a successful OAuth2 authentication.
Things I&amp;rsquo;ve learned: More Spring Security.
Things I&amp;rsquo;ve planned for tomorrow: Continue on UserProfile handling/creation.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 025: May 3, 2017</title><link>https://roamingthings.de/posts/100doc-day025/</link><pubDate>Wed, 03 May 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day025/</guid><description>Today&amp;rsquo;s Progress: Added handling of OAuth2 login result and introduced UserProfile.
Things I&amp;rsquo;ve learned: More OAuth2 in Spring.
Things I&amp;rsquo;ve planned for tomorrow: Continue on UserProfile handling/creation.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 024: May 2, 2017</title><link>https://roamingthings.de/posts/100doc-day024/</link><pubDate>Tue, 02 May 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day024/</guid><description>Today&amp;rsquo;s Progress: Added GitHub and facebook authorization using OAuth2.
Things I&amp;rsquo;ve learned: OAuth2 in Spring.
Things I&amp;rsquo;ve planned for tomorrow: Try to add local user accounts.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 023: May 1, 2017</title><link>https://roamingthings.de/posts/100doc-day023/</link><pubDate>Mon, 01 May 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day023/</guid><description>Today&amp;rsquo;s Progress: Pulled persistence supporting classes into a separate project.
Things I&amp;rsquo;ve learned: A lot of gradle.
Things I&amp;rsquo;ve planned for tomorrow:
Link(s) to work: Persistence Support</description></item><item><title>[100 Days of Code] Day 022: April 30, 2017</title><link>https://roamingthings.de/posts/100doc-day022/</link><pubDate>Sun, 30 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day022/</guid><description>Today&amp;rsquo;s Progress: Did a bit more security. Now logout is possible and user name is displayed.
Things I&amp;rsquo;ve learned: More on Spring Security.
Things I&amp;rsquo;ve planned for tomorrow:
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 021: April 29, 2017</title><link>https://roamingthings.de/posts/100doc-day021j/</link><pubDate>Sat, 29 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day021j/</guid><description>Today&amp;rsquo;s Progress: Started integrating security by implementing a simple sign in form.
Things I&amp;rsquo;ve learned: Spring security basics.
Things I&amp;rsquo;ve planned for tomorrow: Improve usage of Spring Security.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 020: April 28, 2017</title><link>https://roamingthings.de/posts/100doc-day020/</link><pubDate>Fri, 28 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day020/</guid><description>Today&amp;rsquo;s Progress: Only a small update today. Cleaned up the script and added the list of last expenses to the home page.
Things I&amp;rsquo;ve learned: Externalizing the scripts and reuse fragments.
Things I&amp;rsquo;ve planned for tomorrow: Add security.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 019: April 27, 2017</title><link>https://roamingthings.de/posts/100doc-day019/</link><pubDate>Thu, 27 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day019/</guid><description>Today&amp;rsquo;s Progress: Added deletion of entities by AJAX requests.
Things I&amp;rsquo;ve learned: Learned about how to partially render view in MVC and use AJAX.
Things I&amp;rsquo;ve planned for tomorrow: Look more into AJAX and partial view rendering.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 018: April 26, 2017</title><link>https://roamingthings.de/posts/100doc-day018/</link><pubDate>Wed, 26 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day018/</guid><description>Today&amp;rsquo;s Progress: Added deletion of entities.
Things I&amp;rsquo;ve learned: Learned about how to delete using MVC.
Things I&amp;rsquo;ve planned for tomorrow: Change deletion to AJAX.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 017: April 25, 2017</title><link>https://roamingthings.de/posts/100doc-day017/</link><pubDate>Tue, 25 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day017/</guid><description>Today&amp;rsquo;s Progress: Added field reference number and started investigation about useful integration tests for MVC controller. Also made test profile configurable and only loading sample data in dev profile.
Things I&amp;rsquo;ve learned: Handling active profile for testing and developing stage.
Things I&amp;rsquo;ve planned for tomorrow: Get more into testing of an MVC controller.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 016: April 24, 2017</title><link>https://roamingthings.de/posts/100doc-day016/</link><pubDate>Mon, 24 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day016/</guid><description>Today&amp;rsquo;s Progress: Added a lot of Docker stuff: Building an image,orchestration with docker swarm and load balancing. Also new entities can now be created.
Things I&amp;rsquo;ve learned: Learned about building a docker image with gradle, pushing to a registry and setting up a container infrastructure with load balancing.
Things I&amp;rsquo;ve planned for tomorrow: Improve database setup and initialization.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 015: April 23, 2017</title><link>https://roamingthings.de/posts/100doc-day015/</link><pubDate>Sun, 23 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day015/</guid><description>Today&amp;rsquo;s Progress: Wrote first MVC integration tests. Started migration to LocalDate.
Things I&amp;rsquo;ve learned: Learned about testing ov Spring MVC controllers including mocking. Also learned about using LocalDate instead of Date.
Things I&amp;rsquo;ve planned for tomorrow: Create new entities. Write more MVC integration tests.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 014: April 22, 2017</title><link>https://roamingthings.de/posts/100doc-day014/</link><pubDate>Sat, 22 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day014/</guid><description>Today&amp;rsquo;s Progress: Migrated to Thymeleaf layout dialect.
Things I&amp;rsquo;ve learned: I learned more about the layout method of Thymeleaf.
Things I&amp;rsquo;ve planned for tomorrow: Create new entities and look for/compare with &amp;ldquo;best practices&amp;rdquo;. Most of all add tests!
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 013: April 21, 2017</title><link>https://roamingthings.de/posts/100doc-day013/</link><pubDate>Fri, 21 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day013/</guid><description>Today&amp;rsquo;s Progress: Added messages resource.
Things I&amp;rsquo;ve learned: I learned more about the validation and resource mechanism in Spring/Thymeleaf.
Things I&amp;rsquo;ve planned for tomorrow: Create new entities and look for/compare with &amp;ldquo;best practices&amp;rdquo;. Most of all add tests!
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 012: April 20, 2017</title><link>https://roamingthings.de/posts/100doc-day012/</link><pubDate>Thu, 20 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day012/</guid><description>Today&amp;rsquo;s Progress: Added form validation.
Things I&amp;rsquo;ve learned: I learned about the basic validation mechanism in Spring MVC.
Things I&amp;rsquo;ve planned for tomorrow: Strengthen the form, Add validation (messages), create new instances and look for/compare with &amp;ldquo;best practices&amp;rdquo;. Most of all add tests!
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 011: April 19, 2017</title><link>https://roamingthings.de/posts/100doc-day011/</link><pubDate>Wed, 19 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day011/</guid><description>Today&amp;rsquo;s Progress: Edit existing entities in a HTML form with Thymeleaf.
Things I&amp;rsquo;ve learned: I learned about the basic round trip, how Thymeleaf and Spring handle and convert data passed back and forth.
Things I&amp;rsquo;ve planned for tomorrow: Strengthen the form, Add validation (messages), create new instances and look for/compare with &amp;ldquo;best practices&amp;rdquo;. Most of all add tests!
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 010: April 18, 2017</title><link>https://roamingthings.de/posts/100doc-day010/</link><pubDate>Tue, 18 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day010/</guid><description>Today&amp;rsquo;s Progress: Learned about projections when it comes to REST resources in Spring. List of expenses now contains &amp;ldquo;real&amp;rdquo; values.
Things I&amp;rsquo;ve learned: How to access the system id without parsing the link / resource that is included. I&amp;rsquo;m using a projection to add the entity id as a property systemId and use this in the list.
Things I&amp;rsquo;ve planned for tomorrow: Try to get the edit page working.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 009: April 17, 2017</title><link>https://roamingthings.de/posts/100doc-day009/</link><pubDate>Mon, 17 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day009/</guid><description>Today&amp;rsquo;s Progress: Learned about how to handle HATEOAS in the Spring Framework by getting a list of recurring expenses.
Things I&amp;rsquo;ve learned: HATEOAS is an interesting mechanism but hard to handle. The whole project starts to smell like Cargo Cult. I may start over with a much smaller / simpler approach.
Things I&amp;rsquo;ve planned for tomorrow: Try to extract the id from HATEOAS objects and decide to continue on this route or switch over to a monolith architecture (very likely).</description></item><item><title>[100 Days of Code] Day 008: April 16, 2017 (Happy Easter)</title><link>https://roamingthings.de/posts/100doc-day008/</link><pubDate>Sun, 16 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day008/</guid><description>Today&amp;rsquo;s Progress: Figured out how to use the Thymeleaf layout mechanism. Added Font Awesome.
Things I&amp;rsquo;ve learned: Following an example that was using the Thymeleaf mechanism I almost freaked out since I couldn&amp;rsquo;t get it to work in my project until I learned that and how I have to switch to Version 3 of Thymeleaf in my Spring Boot project.
Things I&amp;rsquo;ve planned for tomorrow: Utilize Thymeleaf to replace more static data with real values.</description></item><item><title>[100 Days of Code] Day 007: April 15, 2017</title><link>https://roamingthings.de/posts/100doc-day007/</link><pubDate>Sat, 15 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day007/</guid><description>Today&amp;rsquo;s Progress: Moved to a new layout based on Bootstrap dashboard example and added a page example for editing.
Things I&amp;rsquo;ve learned: I&amp;rsquo;ve been used to write UIs using JSF. The more I get into Thymleaf I notice that the paradigm and mechanisms are completely different and I need some more time to wrap my head around. However I like the approach to first model in &amp;ldquo;pure&amp;rdquo; HTML and later switch to a Thymleaf template</description></item><item><title>[100 Days of Code] Day 006: Apr 14, 2017</title><link>https://roamingthings.de/posts/100doc-day006/</link><pubDate>Fri, 14 Apr 2017 08:37:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day006/</guid><description>Today&amp;rsquo;s Progress: Pull UI into a separate project.
Things I&amp;rsquo;ve learned: I came to the conclusion that a separate UI project will introduce a clean separation between UI and service. I&amp;rsquo;ve been thinking if this is the right time to do this kind of split/refactoring or if it is better to continue implementing both parts in one project and do the refactoring later. However since I want to learn some best practices I decided to do the separation now.</description></item><item><title>[100 Days of Code] Day 005: April 13, 2017</title><link>https://roamingthings.de/posts/100doc-day005/</link><pubDate>Thu, 13 Apr 2017 08:36:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day005/</guid><description>Today&amp;rsquo;s Progress: Added infrastructure for UI using MVC and Thymeleaf.
Things I&amp;rsquo;ve learned: I&amp;rsquo;m used to implement views using JSF. I just learned that Thymeleaf behaves completely different.
Things I&amp;rsquo;ve planned for tomorrow: Improve the ui and feed in first &amp;ldquo;real&amp;rdquo; data.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 004: April 12, 2017</title><link>https://roamingthings.de/posts/100doc-day004/</link><pubDate>Wed, 12 Apr 2017 08:34:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day004/</guid><description>Today&amp;rsquo;s Progress: Added entity listeners to update meta information regarding create and modify.
Things I&amp;rsquo;ve learned: Test support provided by the Spring Framework speeds up development of tests.
Things I&amp;rsquo;ve planned for tomorrow: Since I didn&amp;rsquo;t get to this task today: Add some more (complex) attributes and prepare a web ui.
Link(s) to work: Expenses Service</description></item><item><title>[100 Days of Code] Day 003: April 11, 2017</title><link>https://roamingthings.de/posts/100doc-day003/</link><pubDate>Tue, 11 Apr 2017 08:32:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day003/</guid><description>Today&amp;rsquo;s Progress: Rewrote system test from yesterday as an integration test to discover the difference when using Tools provided by the Spring Framework. I&amp;rsquo;m not embracing it completely on purpose (yet). Will do more comparision and experimentation when the project becomes more complex.
Things I&amp;rsquo;ve learned: It&amp;rsquo;s always gets hard when you start &amp;ldquo;fighting the system&amp;rdquo; by not using the tools provided but to force the framework into patterns you&amp;rsquo;ve learned with other frameworks.</description></item><item><title>[100 Days of Code] Day 002: April 10, 2017</title><link>https://roamingthings.de/posts/100doc-day002/</link><pubDate>Mon, 10 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day002/</guid><description>Today&amp;rsquo;s Progress: Added a first entity (RecurringExpense) which is the core entity of the domain.
Things I&amp;rsquo;ve learned: I&amp;rsquo;ve started to big and wanted to put too much attributes and functionality into the first version. So I spend too much time thinking about details I might eventually need.
Link(s) to work: Expenses Service
Resources:
Agile Principle 5: Develop small, incremental releases and iterate</description></item><item><title>[100 Days of Code] Day 001: April 9, 2017</title><link>https://roamingthings.de/posts/100doc-day001/</link><pubDate>Sun, 09 Apr 2017 19:59:00 +0000</pubDate><guid>https://roamingthings.de/posts/100doc-day001/</guid><description>Today&amp;rsquo;s Progress: Set up project modules for service and system test and implemented smoke test.
Link(s) to work: Expenses Service</description></item><item><title>My 100 Days of Code challenge</title><link>https://roamingthings.de/posts/my-100-days-of-code-challenge/</link><pubDate>Sat, 08 Apr 2017 08:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/my-100-days-of-code-challenge/</guid><description>One of my permanent aims is to improve my skills in professional software development and methodologies like Domain Driven Development (DDD), Test Driven Design and Continuous Delivery. In addition to that there are some projects I want to implement.
Until now I&amp;rsquo;ve ben struggling where to start and how to measure &amp;ldquo;improving&amp;rdquo;. However this weekend I learned about the 100 Days of Code challenge on the Codenewbies Podcast. Alexander Kallaway saw himself in a similar situation.</description></item><item><title>How to configure the clock generator for USB in an ATSAMD21 (ASF)</title><link>https://roamingthings.de/posts/how-to-configure-the-clock-generator-for-usb-in-an-atsamd21-asf/</link><pubDate>Sat, 21 Jan 2017 12:28:11 +0000</pubDate><guid>https://roamingthings.de/posts/how-to-configure-the-clock-generator-for-usb-in-an-atsamd21-asf/</guid><description>Configuring the USB port on an ATSAMD21 is well documented in the ASF documentation.
By default the GCLK generator 0 which is the main clock will be used (GCLK_GENERATOR_0 as defined in usb_device_udd.c). When this configuration is used some other services like the delay or I2C module will no longer function or have to be configured with another generator.
This example shows how to configure the USB module to use the GCLK generator 3 so that the main clock can be configured independently.</description></item><item><title>Use J-Link to change the boot loader protection of a SAM D21</title><link>https://roamingthings.de/posts/use-j-link-to-change-the-boot-loader-protection-of-a-sam-d21/</link><pubDate>Fri, 20 Jan 2017 13:04:42 +0000</pubDate><guid>https://roamingthings.de/posts/use-j-link-to-change-the-boot-loader-protection-of-a-sam-d21/</guid><description>I&amp;rsquo;m a big fan of the Adafruit Feather M0 boards equipped with an ATSAMD21 Cortex-M0+ controller. When I recently tried to write my program to the flash using a J-Link debugger the write process failed.
It took me a while to find the reason in the BOOTPROT fuse.
Boot loader configuration BOOTPROT defines the size of the boot loader in bytes. The defined boot loader section is write protected. So to (over)write the bootloader or write a programme without using a bootloader, this value has to be set to 0x7 which leads to a bootloader size of 0 bytes.</description></item><item><title>Imageflood</title><link>https://roamingthings.de/posts/imageflood/</link><pubDate>Fri, 05 Aug 2016 05:53:11 +0000</pubDate><guid>https://roamingthings.de/posts/imageflood/</guid><description>Recently I&amp;rsquo;ve been re-organizing my image library and therefor all of the images I took since the beginning of this century. It has been a very interesting experience and I&amp;rsquo;m still far from being done with the whole task. However I noticed that I took a lot of shots in situations that have been exciting in that very moment and maybe some time thereafter. Examples are cloud formations, sunrises, buildings or things lying on the street that looked funny or interesting to me and I wanted to preserve.</description></item><item><title>My attendance at the Airhacks workshop</title><link>https://roamingthings.de/posts/my-attendance-at-the-airhacks-workshop/</link><pubDate>Fri, 17 Jun 2016 08:07:08 +0000</pubDate><guid>https://roamingthings.de/posts/my-attendance-at-the-airhacks-workshop/</guid><description>This June I attended the Java EE Bootstrap and Effective Java EE workshops in Munich held by Adam Bien. This has been the second time I attended an Airhacks workshop.
The main workshop series consist of the three workshops Java EE Bootstrap, Effective Java EE and Java EE Architecture held on three consequent days.
The Instructor Adam Bien is a freelance software developer based in Germany. From my experience he has a deep and practical knowledge of Java and specially Java EE from many years of practice.</description></item><item><title>Raspberry Pi, Bluetooth LE and Java</title><link>https://roamingthings.de/posts/raspberry-pi-ble-and-java/</link><pubDate>Thu, 02 Jun 2016 01:32:29 +0000</pubDate><guid>https://roamingthings.de/posts/raspberry-pi-ble-and-java/</guid><description>When I learned about the Raspberry Pi 3 with its integrated Bluetooth 4 capabilities I got instantly excited. I find Bluetooth LE (BLE) very fascinating. It allows to spread sensor data and similar information in a very easy and standardized way. I got a board and started playing around. It turned out that the current system integration still needs some [work]. Since I&amp;rsquo;m a Java developer I wanted to do some project using Java to communicate with the physical world.</description></item><item><title>Being at the Nighthacking Germany Tour in Berlin</title><link>https://roamingthings.de/posts/being-at-the-nighthacking-germany-tour-in-berlin/</link><pubDate>Sat, 05 Mar 2016 07:03:24 +0000</pubDate><guid>https://roamingthings.de/posts/being-at-the-nighthacking-germany-tour-in-berlin/</guid><description>Yesterday evening I have been at the Nighthacking Germany Tour here in Berlin.
The presentations by Sebastian Daschner about Putting Hypermedia Back in REST with JAX-RS and Stephen Chin about Raspberry Pi with Java have been very inspiring.
First I learned about &amp;ldquo;real world&amp;rdquo; REST services that concentrate on resources and how to embed references to resources and actions to have better, client independent service interfaces.
In the second presentation Stephen Chin (@steveonjava showed us how he build a Retro Game Console using a RaspberryPi, an Emulator written in Java and a case which he designed and created by himself.</description></item><item><title>A Maven archetype for bootstrapping a JavaEE 7 / Twitter Bootstrap project</title><link>https://roamingthings.de/posts/a-maven-archetype-for-bootstrapping-a-javaee-7-twitter-bootstrap-project/</link><pubDate>Tue, 01 Mar 2016 18:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/a-maven-archetype-for-bootstrapping-a-javaee-7-twitter-bootstrap-project/</guid><description>I know that Twitter Bootstrap is discussed very controversially in the community of &amp;ldquo;real&amp;rdquo; designers. However I like this template framework since it provides me a way to bootstrap a new project very quickly and have a variety of utilities at hand for creating a responsive frontend. I&amp;rsquo;m using Bootstrap for a long time now and became comfortable with it.
Also the task to set up a JavaEE 7 web project has become much easier there are still some things to configure and set up to have a JSF frontend with Bootstrap and some other features I usually need to work.</description></item><item><title>Contact</title><link>https://roamingthings.de/contact/</link><pubDate>Tue, 01 Mar 2016 18:00:00 +0000</pubDate><guid>https://roamingthings.de/contact/</guid><description>Getting in Touch If you would like to contact me feel free to use any of the following contact details.
ALEXANDER SPARKOWSKY
Wilseder Str. 17 12169 Berlin Germany
T +49 30 79 40 36 41 F +49 30 79 78 17 88 E info@roamingthings.de
twitter @fischbauch</description></item><item><title>Imprint / Privacy</title><link>https://roamingthings.de/imprint/</link><pubDate>Tue, 01 Mar 2016 18:00:00 +0000</pubDate><guid>https://roamingthings.de/imprint/</guid><description>Alexander Sparkowsky
Wilseder Str. 17 12169 Berlin
Telefon: +49 30 79403641 E-Mail: kontakt@roamingthings.de
Bei diesem Angebot handelt es sich um ein privates Angebot.
Social Media Alle VerknÃ¼pfungen/Verlinkungen/Hyperlinks, die Sie auf roamingthings.de finden, wurden bei der Erstellung der Seite geprÃ¼ft. Ich habe keinen keinen Einfluss auf die Inhalte und Darstellung der Seiten, die Ã¼ber die VerknÃ¼pfung/Verlinkung/Hyperlink erreicht werden. Sollten VerknÃ¼pfungen/Verlinkungen/Hyperlinks unerreichbar sein, sich auf den Seiten, die Ã¼ber ein VerknÃ¼pfung/Verlinkung/Hyperlink erreicht werden rechtswidrige Inhalte befinden oder sich die auf den Seiten befindlichen Inhalte geÃ¤ndert haben, bitten ich um eine Nachricht an kontakt@roamingthings.</description></item><item><title>Running/Debugging Arquillian Integration-Tests with WildFly inside IntelliJ 15</title><link>https://roamingthings.de/posts/arquillian-integration-tests-wildfly-intellij-15/</link><pubDate>Tue, 01 Mar 2016 18:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/arquillian-integration-tests-wildfly-intellij-15/</guid><description>Unfortunately integration testing needs a great effort to be set up. But once you have it up and running you benefit from being able to examine how multiple parts are working together.
Configure the embedded container using maven Add an Arquillian profile to your pom.xml. This will allow you to run the integration-tests using maven and allows you to deploy and configure the WildFly container itself.
&amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;arquillian-wildfly-embedded&amp;lt;/id&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Another try</title><link>https://roamingthings.de/posts/start/</link><pubDate>Mon, 29 Feb 2016 10:00:00 +0000</pubDate><guid>https://roamingthings.de/posts/start/</guid><description>I&amp;rsquo;ve tried to start blogging before. But like many other I didn&amp;rsquo;t stick to it very long. This is another try to share my thoughts, ideas and things I discover.
The problem I came to the conclusion that I wanted to much to fast. Having a great design, thousands of great plugins, galleries for my photography&amp;hellip;
I never really finished starting. There is this WordPress instance on a server waiting to be finished.</description></item></channel></rss>